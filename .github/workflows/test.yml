name: Test Action

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  lint-scripts:
    name: Lint Shell Scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './scripts'
          severity: warning

  validate-action:
    name: Validate action.yml
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate Action Metadata
        run: |
          # Check if action.yml exists
          if [ ! -f "action.yml" ]; then
            echo "::error::action.yml not found"
            exit 1
          fi
          
          # Validate YAML syntax
          if ! command -v yq &> /dev/null; then
            echo "Installing yq..."
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi
          
          yq eval '.' action.yml > /dev/null
          echo "✅ action.yml is valid YAML"
          
          # Check required fields
          if ! yq eval '.name' action.yml | grep -q "Usable PR Validator"; then
            echo "::error::Missing or invalid 'name' field"
            exit 1
          fi
          
          echo "✅ All required fields present"

  test-script-execution:
    name: Test Script Execution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check Script Permissions
        run: |
          for script in scripts/*.sh; do
            if [ ! -x "$script" ]; then
              echo "::error::$script is not executable"
              exit 1
            fi
            echo "✅ $script is executable"
          done
      
      - name: Test Script Syntax
        run: |
          for script in scripts/*.sh; do
            bash -n "$script"
            echo "✅ $script syntax is valid"
          done

  test-templates:
    name: Validate Templates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check Templates Exist
        run: |
          if [ ! -d "templates" ]; then
            echo "::error::templates directory not found"
            exit 1
          fi
          
          if [ ! -f "templates/basic-validation.md" ]; then
            echo "::error::basic-validation.md template not found"
            exit 1
          fi
          
          if [ ! -f "templates/mcp-integration.md" ]; then
            echo "::error::mcp-integration.md template not found"
            exit 1
          fi
          
          echo "✅ All required templates present"
      
      - name: Validate Template Content
        run: |
          for template in templates/*.md; do
            # Check for required placeholders
            if ! grep -q "{{PR_CONTEXT}}" "$template"; then
              echo "::warning::$template missing {{PR_CONTEXT}} placeholder"
            fi
            
            if ! grep -q "{{BASE_BRANCH}}" "$template"; then
              echo "::warning::$template missing {{BASE_BRANCH}} placeholder"
            fi
            
            echo "✅ $template validated"
          done

  documentation-check:
    name: Check Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check README
        run: |
          if [ ! -f "README.md" ]; then
            echo "::error::README.md not found"
            exit 1
          fi
          
          # Check for required sections
          if ! grep -q "## ✨ Features" README.md; then
            echo "::error::README missing Features section"
            exit 1
          fi
          
          if ! grep -q "## 🚀 Quick Start" README.md; then
            echo "::error::README missing Quick Start section"
            exit 1
          fi
          
          echo "✅ README.md is complete"
      
      - name: Check Other Docs
        run: |
          for file in LICENSE CHANGELOG.md CONTRIBUTING.md; do
            if [ ! -f "$file" ]; then
              echo "::error::$file not found"
              exit 1
            fi
            echo "✅ $file exists"
          done

  security-check:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for Secrets in Code
        run: |
          # Look for potential secrets or credentials (excluding comments, variable names, and echo statements)
          if grep -rn "AKIA\|password\|secret\|token" --include="*.sh" --include="*.yml" scripts/ .github/ 2>/dev/null | \
             grep -v "^[^:]*:[^:]*:#" | \
             grep -v "SECRET_NAME\|MCP_SECRET\|secret-name" | \
             grep -v "echo.*secret\|echo.*token" | \
             grep -v "grep -rn.*secret\|grep -rn.*token" | \
             grep -v "# Get the\|# Look for"; then
            echo "::error::Potential hardcoded secrets found in code"
            exit 1
          fi
          echo "✅ No hardcoded secrets found"
      
      - name: Verify Cleanup Steps
        run: |
          # Check that action.yml has cleanup steps
          if ! grep -q "rm -f /tmp/service-account.json" action.yml; then
            echo "::error::Missing cleanup for service-account.json"
            exit 1
          fi
          
          if ! grep -q "rm -f /tmp/gemini-settings.json" action.yml; then
            echo "::error::Missing cleanup for gemini-settings.json"
            exit 1
          fi
          
          echo "✅ Cleanup steps verified"

  integration-test:
    name: Integration Test (Mock)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Create Mock Prompt
        run: |
          mkdir -p .github/prompts
          cat > .github/prompts/test-prompt.md <<'EOF'
          # Test Validation
          
          ## PR Context
          {{PR_CONTEXT}}
          
          ## Task
          Output a simple test report.
          
          ## Output
          
          # PR Validation Report
          
          ## Summary
          This is a test validation for PR #{{PR_NUMBER}}.
          
          ## Critical Violations ❌
          None
          
          ## Important Issues ⚠️
          None
          
          ## Suggestions ℹ️
          None
          
          ## Validation Outcome
          - **Status**: PASS ✅
          - **Critical Issues**: 0
          - **Important Issues**: 0
          - **Suggestions**: 0
          EOF
      
      - name: Display Mock Test Info
        run: |
          echo "✅ Integration test setup complete"
          echo "Note: Full integration test requires Gemini credentials"
          echo "This is a mock test to verify action structure"

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint-scripts, validate-action, test-script-execution, test-templates, documentation-check, security-check]
    steps:
      - name: Summary
        run: |
          echo "🎉 All checks passed successfully!"
          echo "✅ Scripts are valid and executable"
          echo "✅ Action metadata is correct"
          echo "✅ Templates are present"
          echo "✅ Documentation is complete"
          echo "✅ Security checks passed"
